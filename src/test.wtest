import Agresiones.*
import Personas.*
import Policia.*

describe "test de Denuncias" {
	var agresionGrave
	var agresionIgnea
	var agresionFisica
	var agresionFisicaIgnea
	var roberta
	var anacleta

	fixture {
		agresionGrave = new Agresion("conur", "brian", [ "perra", "sos" ])
		agresionIgnea = new Agresion("san martin", "kevin", [ "fuego" ])
		agresionFisica = new AgresionFisica("paternal", "jony", [ "perra" ], "palo")
		agresionFisicaIgnea = new AgresionFisica("paternal", "jony", [ "perra"
		], "combustible") 
		roberta = new Persona([ "pepe", "brian", "jose"], miedosa, 1, [ ])
		anacleta = new Persona([ "kevin", "jony", "jose"], miedosa, 1, [ ])
	}

	test "si la agresion contiene palabras imperdonables es grave" {

		assert.that(agresionGrave.esGrave())

	}

	test "si la agresion menciona la palabra fuego, es Ignea" {

		assert.that(agresionIgnea.esIgnea())
	}

	test "si la agresion contiene un elemento, es fisica, y poor lo tanto grave"
	{

		assert.that(agresionFisica.esGrave())

	}

	test "Si la persona es miedosa, nunca se treve a denunciar" {
		assert.notThat(roberta.DecideDenunciar(agresionGrave))

	}

	test
	"la persona denuncia si es paciente y la cantidad de Agresiones es mayor al umbral de tolerancia"
	{
		roberta.cambiarPosicion(paciente)
		roberta.esAgredida(agresionGrave)
		roberta.esAgredida(agresionGrave)

		assert.that(roberta.DecideDenunciar(agresionGrave))

	}

	test
	"la persona no denuncia si es paciente y la cantidad de agresiones es menor al umbral"
	{

		roberta.cambiarPosicion(paciente)
		roberta.esAgredida(agresionGrave)

		assert.notThat(roberta.DecideDenunciar(agresionGrave))
	}

	test
	"La persona denuncia si es agerrida y si fue agredida de gravedad previamente por un familiar"
	{

		roberta.cambiarPosicion(aguerrida)
		roberta.esAgredida(agresionGrave)
		assert.that(roberta.DecideDenunciar(agresionGrave))
	}

	test
	"La persona no denuncia si es agerrida y si fue agredida de gravedad previamente por un familiar"
	{

		roberta.cambiarPosicion(aguerrida)
		roberta.esAgredida(agresionFisica)
		assert.notThat(roberta.DecideDenunciar(agresionGrave))
	}

	test
	"La persona es militante y denuncia porque la agresion fue grave y producida por un famililar"
	{

		roberta.cambiarPosicion(militante)
		roberta.esAgredida(agresionGrave)
		assert.that(roberta.DecideDenunciar(agresionGrave))

	}

	test
	"La persona es militante y NO denuncia porque la agresion fue grave y producida por un famililar"
	{

		roberta.cambiarPosicion(militante)
		roberta.esAgredida(agresionIgnea)
		assert.notThat(roberta.DecideDenunciar(agresionIgnea))
	}
	
	test "se registra la denuncia de AgresionGrave"{
		
		roberta.cambiarPosicion(militante)
		roberta.esAgredida(agresionGrave)
		roberta.denunciar(agresionGrave)
		
		assert.equals(policia.obtenerDenuncia(1),policia.obtenerRegistro().last())
	}
	
	test "roberta va a una marcha y se convierte en una militante"{
		
		roberta.participaEnMarcha()
		
		assert.equals(roberta.obtenerPosicionAnteLaVida(), militante)
		
	}
	
	test "cuando roberta es acompañada de anacleta, asume su posición"{
		
		roberta.esAcompaniadaPor(anacleta)
		assert.equals(anacleta.obtenerPosicionAnteLaVida(), roberta.obtenerPosicionAnteLaVida())
	}


	test "una persona es amenazada de muerte siendo miedosa, nada cambia"{
		
		roberta.esAmenazadaDeMuerte()
		assert.equals(miedosa,roberta.obtenerPosicionAnteLaVida())
		
	}
	
	test "una persona es amenazada de muerte siendo paciente, se duplica su tolerancia"{
		
		roberta.cambiarPosicion(paciente)
		
		roberta.esAmenazadaDeMuerte()
		assert.equals(2,roberta.ObtenerUmbralDeTolerancia())
	}
}